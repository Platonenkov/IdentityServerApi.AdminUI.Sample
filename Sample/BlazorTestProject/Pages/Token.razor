@page "/token"
@using System.Text.Json
@using IdentityModel.Client
@inject IJSRuntime JSRuntime
@inject HttpClient Client 
<AuthorizeView>
    <Authorized>
        <div>
            <b>CachedAuthSettings</b>
            <pre>
@JsonSerializer.Serialize(authSettings, indented);
            </pre>
            <br />
            <b>CognitoUser</b><br />
            <div style="width: 100%">
                <pre>
@JsonSerializer.Serialize(user, indented);
            </pre>
            </div>

            <p>Error: @(ApiResponse??"no")</p>
            <b>User data</b><br />
            <button @onclick="GetUserInfoAsync">Get User Data</button>
            @if (UserData.Any())
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <td>Type</td>
                            <td>Value</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (type, value) in UserData)
                        {
                            <tr>
                                <td>@type</td>
                                <td>@value</td>
                            </tr>
                        }
                    </tbody>
                </table>

            }
            @if (user is not null && !string.IsNullOrWhiteSpace(user.access_token))
            {
                <b>Api data</b><br />
                <pre>
                @CallServiceAsync(user.access_token, "WeatherForecast").Result
                            </pre>
                <b>Policy data</b><br />
                <pre>
                @CallServiceAsync(user.access_token, "WeatherForecastPolicy").Result
                            </pre>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning" role="alert">
            Everything requires you to <a href="/authentication/login">Log In</a> first.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    JsonSerializerOptions indented = new JsonSerializerOptions() { WriteIndented = true };
    CachedAuthSettings authSettings;
    CognitoUser user;
    string ApiResponse;
    Dictionary<string, string> UserData = new Dictionary<string, string>();
    protected override async Task OnInitializedAsync()
    {
        string key = "Microsoft.AspNetCore.Components.WebAssembly.Authentication.CachedAuthSettings";
        string authSettingsRAW = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", key);
        authSettings = JsonSerializer.Deserialize<CachedAuthSettings>(authSettingsRAW);
        string userRAW = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", authSettings?.OIDCUserKey);
        user = JsonSerializer.Deserialize<CognitoUser>(userRAW);


    }

    public async Task GetUserInfoAsync()
    {
        UserData = await GetUserInfoAsync(user.access_token);
        Console.WriteLine($"finish to get user data: {UserData.Count} rows");
    }
    public async Task<Dictionary<string, string>> GetUserInfoAsync(string accessToken)
    {
        try
        {

            var client = new HttpClient();

            var disco = await client.GetDiscoveryDocumentAsync("https://localhost:44310");
            if (disco.IsError) throw new Exception(disco.Error);

            var user_data = await client.GetUserInfoAsync(
                new UserInfoRequest() { Address = disco.UserInfoEndpoint, Token = accessToken });

            if (!user_data.IsError)
                return user_data.Claims.ToDictionary(claim => claim.Type, claim => claim.Value);

            ApiResponse = user_data.Error;
            return new Dictionary<string, string>();
        }
        catch (Exception e)
        {
            ApiResponse = e.Message;
        }
        return new Dictionary<string, string>();
    }

    public async Task<string> CallServiceAsync(string token, string controller)
    {
        var baseAddress = "https://localhost:44365";

        //var client = Client
        //{
        //    BaseAddress = new Uri(baseAddress)
        //};

        Client.SetBearerToken(token);

        try
        {
            var response = await Client.GetStringAsync($"{baseAddress}/{controller}");
            return response;
        }
        catch (Exception e)
        {
            return e.Message;
        }
    }

    public class CachedAuthSettings
    {
        public string authority { get; set; }
        public string metadataUrl { get; set; }
        public string client_id { get; set; }
        public string[] defaultScopes { get; set; }
        public string redirect_uri { get; set; }
        public string post_logout_redirect_uri { get; set; }
        public string response_type { get; set; }
        public string response_mode { get; set; }
        public string scope { get; set; }

        public string OIDCUserKey => $"oidc.user:{authority}:{client_id}";
    }

    public class CognitoUser
    {
        public string id_token { get; set; }
        public string access_token { get; set; }
        public string refresh_token { get; set; }
        public string token_type { get; set; }
        public string scope { get; set; }
        public int expires_at { get; set; }
    }
}